buildscript {
   repositories {
      jcenter()
   }

   dependencies {
      classpath 'commons-io:commons-io:2.5'
   }
}
import static org.apache.commons.io.output.NullOutputStream.NULL_OUTPUT_STREAM

plugins {
   id 'java'         	// self explanatory
   id 'idea'         	// idem
   id 'eclipse'		 	// eclipse
   id 'findbugs'	 	// findbugs plugin for static code analysis
   id 'pmd'			 	// code quality check plugin
   id 'jacoco'			// code coverage 
   id 'project-report'	// project reporting plugin
   id 'com.github.hierynomus.license' version '0.11.0'   // license checks
   id 'com.github.ben-manes.versions' version '0.15.0'   // version checks
   id 'com.jfrog.bintray' version '1.7.3'
   id 'maven-publish'
}

// maven coordinates
group = 'org.adoptopenjdk.jitwatch'

def props = new Properties()
file("build.properties").withInputStream { props.load(it) }

version = props.getProperty("version");

allprojects {
    repositories {
        jcenter()  // faster than mavenCentral()
    }
}

//Code quality plugins configuration
findbugsMain {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

findbugs {
	ignoreFailures = true
	sourceSets = [sourceSets.main]
}

pmd {
	ignoreFailures = true
	sourceSets = [sourceSets.main]
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.enabled true
	}
}
//Code quality plugins configuration end

apply from: "gradle/eclipse.gradle"

license {
    header = rootProject.file('config/HEADER')
    strictCheck = true
    ignoreFailures = true
    mapping {
        java   = 'SLASHSTAR_STYLE'
        groovy = 'SLASHSTAR_STYLE'
        scala  = 'SLASHSTAR_STYLE'
    }
    ext.year = '2013, 2014'
    exclude '**/*.png'
    exclude '**/*.kt'
}

// do not format test resources
licenseTest {
    source -= sourceSets.test.resources
}

subprojects {
    task sourceJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
    }
}

bintray {
  user = rootProject.hasProperty('bintrayUser') ? rootProject.property('bintrayUser') : 'FIXME'
  key = rootProject.hasProperty('bintrayApiKey') ? rootProject.property('bintrayApiKey') : 'FIXME'
  publications = ['bintray']

  pkg {
    repo = 'maven'
    licenses = ['BSD 2-Clause']
    vcsUrl = 'https://github.com/AdoptOpenJDK/jitwatch'
    name = "${project.group}:${project.name}"

    version {
      name = project.version
      released = new Date()
      vcsTag = 'v' + project.version
    }
  }
}

task makeDemoLogFile(type: JavaExec) {
    dependsOn classes
    main = 'org.adoptopenjdk.jitwatch.demo.MakeHotSpotLog'
    jvmArgs = [
        // --== required switches ==--
        // Unlock the HotSpot logging options
        "-XX:+UnlockDiagnosticVMOptions",

        // Log each time a class is loaded (how JITWatch builds the class model)
        "-XX:+TraceClassLoading",

        // Enable XML format HotSpot log output
        "-XX:+LogCompilation",

        // --== optional switches ==--
        // Enable disassembly of native code into assembly language (AT&T / GNU format)
        // Requires the hsdis (HotSpot disassembler) binary to be added to your JRE
        // For hsdis build instructions see http://www.chrisnewland.com/building-hsdis-on-linux-amd64-on-debian-369
        "-XX:+PrintAssembly",

        // Change disassembly format from AT&T to Intel assembly
        "-XX:PrintAssemblyOptions=intel",

        // Disable tiered compilation (enabled by default on Java 8, optional on Java 7)
        "-XX:-TieredCompilation",

        // Enable tiered compilation
        "-XX:+TieredCompilation",

        // Disable compressed oops (makes assembly easier to read)
        "-XX:-UseCompressedOops"
    ]
    classpath = project.configurations.runtime
    ignoreExitValue = true
    standardOutput = NULL_OUTPUT_STREAM
    errorOutput = NULL_OUTPUT_STREAM
}
